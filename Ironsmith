#!/bin/bash

#set -e #Exit on error

#Path=`pwd` #Folder where the container is situated

#Path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

Path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log_file=$(echo "$Path/LogFiles/Output.Ironsmith_$(date +"%m_%d_%Y_%H_%M_%S").txt")
exec &> >(tee -a "$log_file")

#Authored by Valentinos Zachariou on 05/12/2022
#
#	Copyright (C) 2022 Valentinos Zachariou, University of Kentucky (see LICENSE file for more details)
#
#	Master Ironsmith script. Checks paths and file availability and creates variables for use by subsequent scripts.
#	The Master script also creates the output directory in the user specified path.
#
#
#
#
#       _---~~(~~-_.
#     _{        )   )
#   ,   ) -~~- ( ,-' )_
#  (  `-,_..`., )-- '_,)
# ( ` _)  (  -~( -_ `,  }
# (_-  _  ~_-~~~~`,  ,' )
#   `~ -^(    __;-,((()))
#         ~~~~ {_ -_(())
#                `\  }
#                  { }
#
#


clear

#Font Name: ANSI Regular
echo ""
echo "██ ██████   ██████  ███    ██     ███████ ███    ███ ██ ████████ ██   ██ "
echo "██ ██   ██ ██    ██ ████   ██     ██      ████  ████ ██    ██    ██   ██ "
echo "██ ██████  ██    ██ ██ ██  ██     ███████ ██ ████ ██ ██    ██    ███████ "
echo "██ ██   ██ ██    ██ ██  ██ ██          ██ ██  ██  ██ ██    ██    ██   ██ "
echo "██ ██   ██  ██████  ██   ████     ███████ ██      ██ ██    ██    ██   ██ "                                                                  
echo ""
echo ""
echo -e "\t\t             _---~~(~~-_.		    "
echo -e "\t\t           _{        )   )		    "
echo -e "\t\t         ,   ) -~~- ( ,-' )_	    "
echo -e "\t\t        (  '-,_..'., )-- '_,)	    "
echo -e "\t\t       ( ' _)  (  -~( -_ ',  }	    "
echo -e "\t\t       (_-  _  ~_-~~~~',  ,' )         "
echo -e "\t\t         '~ -^(    __;-,((()))	    "
echo -e "\t\t               ~~~~ {_ -_(())          "
echo -e "\t\t                      '\  }            "
echo -e "\t\t                       { }             "
echo -e "				            "
echo -e "\t	  Ironsmith QSM Toolkit V1.5 Beta (02/13/2023)		       "
echo -e "\t	  Valentinos Zachariou	    		  	     	       "
echo -e "\t	  University of Kentucky 	                               "
echo -e "\t	  https://github.com/vzachari/IronSmithQSM		       "
echo -e "-------------------------------------------------------------------------"
echo ""

sleep 3s

echo ""
echo "Path set to $Path"
echo ""

CSVFile=$1
OutFolder=$2
TooManyInputs=$3
MPRType=0
ExCode=0
First_DICOM=0
DICOM_Error=0
ContainerFlag=0 #1 = Singularity, 2 = Docker
MatlabFlag=0
MEDIInstFlag=0
MatPath="MATLAB PATH NOT SET"

#Check if QSM_Container.simg is in /Functions

if [ -f "$Path/Functions/QSM_Container.simg" ] && [[ $(find $Path/Functions/QSM_Container.simg -type f -size +10750000000c 2>/dev/null) ]]; then

	echo ""
	echo "QSM_Container.simg FOUND in $Path/Functions"
	echo ""

else

	echo ""
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: QSM_Container.simg NOT FOUND in $Path/Functions or is the wrong size (should be 10.8G)! (⊙_◎) "
	echo ""
	echo "Please download QSM_Container.simg from:"
	echo ""
	echo "https://drive.google.com/file/d/1NFV2z0yIEPKGblQVrcMe8bza8ZS21AO7/view?usp=sharing"
	echo ""
	echo "Then place in $Path/Functions"
	echo -e "----------------------------------------------\e[0m"
	echo ""
	exit 1

fi

echo ""
echo "---------------------------------------------------------------"
echo "*** Checking if Singularity and/or Docker are installed: ***"
echo "---------------------------------------------------------------"
echo ""

#Check for Singularity or docker

if command -v singularity &> /dev/null; then

	#SingVer1=$(singularity --version | awk -F 'version' '{print $1}')
	SingVer2=$(singularity --version | awk -F 'version' '{print $2}')
	echo ""
	#echo -e "singularity Ver \e[44m$SingVer2\e[0m installed. All good! "
	echo "Singularity Ver$SingVer2 installed. All good! "
	#echo -e "singularity is installed. All good! "
	echo ""
	ContainerFlag=1

 	#Test QSM_Container.simg
 	echo ""
 	echo "---------------------------------------------------------------"
  	echo "*** Testing QSM_Container.simg... ***"
  	echo "---------------------------------------------------------------"
  	echo ""

 	#Warmup run
  	singularity run -e $Path/Functions/QSM_Container.simg afni -ver &> /dev/null
  	singularity run -e $Path/Functions/QSM_Container.simg flirt -version &> /dev/null

  	unset ConTest
  	ConTest=$(singularity run -e $Path/Functions/QSM_Container.simg afni -ver | awk '{print $8}')

	if [[ $ConTest == "AFNI_21.1.12" ]]; then

      		echo ""
      		echo "QSM_Container.simg test SUCCESSFUL! "
     		echo ""

  	else

   		echo ""
   		echo -e "\e[93m----------------------------------------------"
    		echo "ERROR: QSM_Container.simg test FAILED! "
    		echo ""
    		echo "QSM_Container.simg could be corrupted, please re-download from:"
    		echo "https://drive.google.com/file/d/1NFV2z0yIEPKGblQVrcMe8bza8ZS21AO7/view?usp=sharing"
    		echo -e "----------------------------------------------\e[0m"
    		echo ""
   		exit 1

  	fi

elif ! command -v singularity &> /dev/null; then
	echo ""
	echo -e "\e[93m----------------------------------------------"
	echo "WARNING: Singularity NOT FOUND! "
	echo "Checking for DOCKER"
	echo -e "----------------------------------------------\e[0m"
	echo ""

	if command -v docker &> /dev/null; then


		DockVer2=$(docker --version | awk -F 'version' '{print $2}')
		echo ""
		echo -e "\e[93m----------------------------------------------"
		echo "ERROR: Docker Ver $DockVer2 installed. However, only Singularity supported at the moment (╯°□°）╯︵ ┻━┻ "
		echo -e "----------------------------------------------\e[0m"
		echo ""
		ContainerFlag=2
    		exit 1


	elif ! command -v docker &> /dev/null; then

		echo ""
		echo -e "\e[93m----------------------------------------------"
		echo "ERROR: Singularity not FOUND! "
		echo "Singularity needs to be installed for this toolkit to work ¯\_(ツ)_/¯"
		echo -e "----------------------------------------------\e[0m"
		echo ""
		exit 1
	fi
fi

echo ""
echo "---------------------------------------------------------------"
echo "*** Checking arguments provided with Ironsmith command: ***"
echo "---------------------------------------------------------------"
echo ""

#Eliminate last / if given with OutFolder

if [[ `echo $OutFolder | grep -o '.$'` == "/" ]]; then

	#echo "${OutFolder%?}"
	#echo "Eternal sunshine of the spotless mind"
	OutFolder=${OutFolder%?}
	#echo $OutFolder
fi

#Check arguments provided with Ironsmith command

if [ -z "$CSVFile" ]; then

	echo ""
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: No input file provided! "
	echo "Syntax: Ironsmith MyInputFile.txt /path/to/output/folder"
	echo "Please see $Path/README.md for details"
	echo -e "----------------------------------------------\e[0m"
	echo ""
	exit 1

elif [ -z "$OutFolder" ]; then

	echo ""
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: No output folder provided! "
	echo "Syntax: Ironsmith MyInputFile.txt /path/to/output/folder"
	echo "Please see $Path/README.md for details"
	echo -e "----------------------------------------------\e[0m"
	echo ""
	exit 1

elif [ ! -z "$TooManyInputs" ]; then
	echo ""
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: Too many arguments provided! "
	echo "Syntax: Ironsmith MyInputFile.txt /path/to/output/folder"
	echo "Please see $Path/README.md for details"
	echo -e "----------------------------------------------\e[0m"
	echo ""
	echo $TooManyInputs
	exit 1
fi

echo ""
#echo "---------------------------------------------------------------"
#echo -e "Input CSV File is \e[44m$CSVFile\e[0m"
echo "Input CSV file is $CSVFile"
#echo "---------------------------------------------------------------"
echo ""


#Check if input CSV file exists

if [ -f "$CSVFile" ]; then
	
	unset CSVFileDir CSVFileName
	CSVFileDir=$(dirname $(readlink -f $CSVFile))
	CSVFileName=$(basename $CSVFile)

	echo ""
	echo "$CSVFile Found in $CSVFileDir"
	echo ""
	
	#Check if .csv file was created in Windows or Mac and convert to Unix line endings

	#if file $CSVFile | grep -w "CRLF" 1> /dev/null 2>&1 && file $CSVFile | grep -w "CR" 1> /dev/null 2>&1; then
	if singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg file /mnt/$CSVFileName | grep -w "CRLF" 1> /dev/null 2>&1 && singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg file /mnt/$CSVFileName | grep -w "CR" 1> /dev/null 2>&1; then

		echo ""
		echo "$CSVFile has a mix of MS Windows and MacOS line endings (╯°□°）╯︵ ┻━┻ . Converting to Unix line endings..."
		echo ""		

		singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg sed -i 's/\r$//' /mnt/$CSVFileName		
		singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg sed -i 's/\r/\n/g' /mnt/$CSVFileName
		
		
	#elif file $CSVFile | grep -w "CRLF" 1> /dev/null 2>&1; then
	elif singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg file /mnt/$CSVFileName | grep -w "CRLF" 1> /dev/null 2>&1; then
		
		echo ""
		echo "$CSVFile has MS Windows line endings. Converting to Unix line endings..."
		echo ""

		singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg sed -i 's/\r$//' /mnt/$CSVFileName

	#elif file $CSVFile | grep -w "CR" 1> /dev/null 2>&1; then
	elif singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg file /mnt/$CSVFileName | grep -w "CR" 1> /dev/null 2>&1; then

		echo ""
		echo "$CSVFile has MacOS line endings. Converting to Unix line endings..."
		echo ""
		
		singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg sed -i 's/\r/\n/g' /mnt/$CSVFileName

	fi

	#Check if .csv file is encoded using UTF-8 Unicode (with BOM) text and remove BOM

	if singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg file /mnt/$CSVFileName | grep -w "(with BOM)" 1> /dev/null 2>&1; then
		
		echo ""
		echo "$CSVFile is encoded with UTF-8 Unicode (with BOM). Removing BOM..."
		echo ""

		singularity run -e --bind $CSVFileDir:/mnt $Path/Functions/QSM_Container.simg sed -i '1s/^\xEF\xBB\xBF//' /mnt/$CSVFileName

	fi


else
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: $CSVFile NOT FOUND! "
	echo -e "----------------------------------------------\e[0m"
	exit 1

fi

#Check if path to output folder is valid

PathToOut=$(echo $OutFolder | awk -F '/' '{OFS = FS} {$NF=""; print $0}')

if [ -d "$PathToOut" ]; then

	echo ""
	echo "Output folder path $PathToOut is a valid path"
	echo "Output files for each participant will be placed under $OutFolder in individual folders"
	echo "$OutFolder will be created if nescessary"
	echo ""

elif [ -z "$PathToOut" ]; then

	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: NOT SURE WHAT $OutFolder IS. Check OUTPUT FOLDER INPUT"
	echo -e "----------------------------------------------\e[0m"
	exit 1
else
	echo -e "\e[31m----------------------------------------------"
	echo "ERROR: $PathToOut NOT FOUND or INVALID. Check OUTPUT FOLDER PATH"
	echo -e "----------------------------------------------\e[0m"
	exit 1

fi

echo ""
echo "---------------------------------------------------------------"
echo "*** Cleaning $Path/LogFiles:"
echo ""
echo "Log files older than 30 days will be deleted *** "
echo ""
echo -e "\t\t ___/-\___		"
echo -e "\t\t|---------|	"
echo -e "\t\t | | | | |		"
echo -e "\t\t | | | | |		"
echo -e "\t\t | | | | |		"
echo -e "\t\t | | | | |		"
echo -e "\t\t |_______| 	"
echo ""
echo "---------------------------------------------------------------"
echo ""

echo ""
echo "Deleting log files..."
echo ""

find $Path/LogFiles -daystart -maxdepth 1 -mtime +30 -type f -name "Output.Ironsmith*.txt" -delete

echo ""
echo "---------------------------------------------------------------"
echo "*** Parsing $CSVFile : ***"
echo "---------------------------------------------------------------"
echo ""

#Figure out how many rows the CSVFile has
CSVFileRows=`awk 'END{print NR}' $CSVFile`
CSVFileTRows=$(cat $CSVFile | sed '/^\s*$/d' | wc -l)

echo ""
echo "$CSVFile has $CSVFileTRows non-empty Rows ---> $CSVFileTRows participants will be processed."
echo ""

for Rows in `seq $CSVFileRows`

do

	echo ""
	echo "---------------------------------------------------------------"
	echo "*** Processing $CSVFile row $Rows ***"
	echo "---------------------------------------------------------------"
	echo ""

	RowCheck=$(awk -v r=$Rows 'FNR == r {print}' $CSVFile)

	if [ -z "$RowCheck" ]; then

		echo ""
		echo "Row $Rows in $CSVFile is empty, skipping..."
		echo ""

		unset RowCheck
		continue

	fi


	#Parse CSV file into variables
	CSVFileColumns=`awk -v r=$Rows -F ',' 'FNR == r {print NF}' $CSVFile`

	#Check if MEDI is needed on a participant by participant basis

	MEDIFlag=`awk -v r=$Rows -F ',' 'FNR == r {print $2}' $CSVFile`


	if  [[ $MEDIFlag == "MEDI_Yes" ]]; then

		if [[ $CSVFileColumns < 4 ]]; then

			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: $CSVFile row $Rows is missing columns, please check, skipping..."
			echo -e "----------------------------------------------\e[0m"
			continue

		elif [[ $CSVFileColumns == 4 ]]; then

			echo ""
			echo "$CSVFile row $Rows has $CSVFileColumns columns! Column test PASSED! "
			echo ""
		fi


		Subj=$(awk -v r=$Rows -F ',' 'FNR == r {print $1}' $CSVFile | awk '{$1=$1};1' | sed -e 's/[[:blank:]]/_/g')
		MPRDir=`awk -v r=$Rows -F ',' 'FNR == r {print $3}' $CSVFile`
		QSM_Dicom_Dir=`awk -v r=$Rows -F ',' 'FNR == r {print $4}' $CSVFile`

		echo ""		
		echo "Participant $Subj requires MEDI processing! "
		echo ""
		
		#Check if Matlab is installed
		
		if [[ $MatlabFlag == 0 ]]; then

			echo ""
			echo "---------------------------------------------------------------"
			echo "*** Checking if Matlab is installed ***"
			echo "---------------------------------------------------------------"
			echo ""			

			# First check for Matlab
			unset MatVer

			MatPath=$(grep -v "#" $Path/Matlab_Config.txt | grep "MATLAB_Path=" | awk -F'"' '{print $2}')

			#MatVer=$($MatPath -nodisplay -nosplash -nodesktop -r "try; v=version; disp(v); catch; end; quit;" | tail -n2 | head -c 3)
			bash $Path/Functions/MatlabVer.sh $Path $MatPath < /dev/null
			MatVer=$(cat $Path/Functions/MatTempFile.txt | awk -F',' '{print $1}')
			ImToolkitTest=$(cat $Path/Functions/MatTempFile.txt | awk -F',' '{print $2}')
			ImToolkitLicTest=$(cat $Path/Functions/MatTempFile.txt | awk -F',' '{print $3}')
			rm $Path/Functions/MatTempFile.txt

			if (( $(echo "$MatVer >= 9.3" | bc -l) )) && (( $(echo "$MatVer < 9.8" | bc -l) )) && [ $ImToolkitTest == 1 ] && [ $ImToolkitLicTest == 1 ]; then

				echo ""
				#echo -e "Matlab Ver \e[44m$MatVer\e[0m installed. All good! "
				echo "Matlab Ver $MatVer installed"
				echo "Image Processing Toolbox found and is licensed! "
				echo "All Good! "
				echo ""
				unset MatlabFlag
				MatlabFlag=1 #correct Version of Matlab found

			elif (( $(echo "$MatVer >= 9.3" | bc -l) )) && (( $(echo "$MatVer < 9.8" | bc -l) )) && [ ! $ImToolkitTest == 1 ]; then

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: Matlab Ver $MatVer is installed but the Image Processing Toolbox was NOT FOUND! "
				echo "Please install the Image Processing Toolbox for Matlab $MatVer as it is required by MEDI Toolbox"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1	

			elif (( $(echo "$MatVer >= 9.3" | bc -l) )) && (( $(echo "$MatVer < 9.8" | bc -l) )) && [ $ImToolkitTest == 1 ] && [ ! $ImToolkitLicTest == 1 ]; then

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: Matlab Ver $MatVer is installed but the Image Processing Toolbox is NOT licensed! ¯\(°_o)/¯ "
				echo "Please license the Image Processing Toolbox for Matlab $MatVer as it is required by MEDI Toolbox"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1				

			elif ((  $(echo "$MatVer < 9.3" | bc -l) )); then

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: The Matlab version installed (ver $MatVer) is too old! "
				echo "Matlab versions between R2017b (9.3) and R2019b (9.7) required for this Toolkit"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1

			elif ((  $(echo "$MatVer > 9.7" | bc -l) )); then

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: The Matlab version installed (ver $MatVer) is too new! "
				echo "Matlab versions between R2017b (9.3) and R2019b (9.7) required for this Toolkit"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1

			else
				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: No Matlab installation found! (ver $MatVer)"
				echo "Matlab versions between R2017b (9.3) and R2019b (9.7) required for this Toolkit"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1
			fi

		elif [[ $MatlabFlag == 1 ]]; then

			echo ""
			echo "*** Skipping Matlab test. Matlab Ver $MatVer already found ***"
			echo ""
		fi
		
		#Check if MEDI_toolbox is in Functions

		
		if [[ $MEDIInstFlag == 0 ]]; then

			echo ""
			echo "---------------------------------------------------------------"
			echo "*** Checking if MEDI Toolbox is installed  ***"
			echo "---------------------------------------------------------------"
			echo ""

			if [ -d "$Path/Functions/MEDI_toolbox" ]; then

				if (( $(du -ha $Path/Functions/MEDI_toolbox | wc | awk '{print $1}') >= 200 )) && [ -f "$Path/Functions/MEDI_toolbox/UPDATES.m" ] && (( $(echo "$(du -sh $Path/Functions/MEDI_toolbox | awk -F'M' '{print $1}') >= 7.0" | bc -l) )); then

					echo ""
					echo "MEDI_toolbox folder FOUND in $Path/Functions"
					echo "Checking MEDI_toolbox version..."
					echo ""

					if [ $(grep -m1 "% Updates" $Path/Functions/MEDI_toolbox/UPDATES.m | awk '{print $4}')="01/15/2020" ]; then

						MEDIVer=$(grep -m1 "% Updates" $Path/Functions/MEDI_toolbox/UPDATES.m | awk '{print $4}' | tr -d '\r' | tr -d '\n')
						
						echo ""
						echo "MEDI_toolbox ver $MEDIVer found. All good! "				
						echo ""
						MEDIInstFlag=1
				
					else
						echo ""
						echo -e "\e[31m----------------------------------------------"
						echo "ERROR: MEDI_toolbox ver $MEDIVer is not currently supported! " 
						echo ""
						echo "Please download ver 01/15/2020 (Jan 15 2020) from: "
						echo "http://pre.weill.cornell.edu/mri/pages/qsm.html and place unzipped folder in $Path/Functions/"		
						echo -e "----------------------------------------------\e[0m"
						echo ""
						exit 1
					fi
				else

					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "ERROR: MEDI_toolbox folder found in $Path/Functions but it's missing files and/or is corrupted!  "
					echo ""
					echo "Please re-download ver 01/15/2020 (Jan 15 2020) from: "
					echo "http://pre.weill.cornell.edu/mri/pages/qsm.html and place unzipped folder in $Path/Functions/"		
					echo -e "----------------------------------------------\e[0m"
					echo ""
					exit 1
				fi				


			else

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: MEDI_toolbox folder not found in $Path/Functions/"
				echo ""
				echo "Please download ver 01/15/2020 (Jan 15 2020) from: "
				echo "http://pre.weill.cornell.edu/mri/pages/qsm.html and place unzipped folder in $Path/Functions/"		
				echo -e "----------------------------------------------\e[0m"
				echo ""
				exit 1
			fi

		elif [[ $MEDIInstFlag == 1 ]]; then

			echo ""
			echo "*** Skipping MEDI Toolbox test. MEDI Toolbox Ver: $MEDIVer already found ***"			
			echo ""

		fi
				

	elif [[	$MEDIFlag == "MEDI_No" ]]; then


		if [[ $CSVFileColumns < 5 ]]; then

			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: $CSVFile row $Rows is missing columns, please check, skipping..."
			echo -e "----------------------------------------------\e[0m"
			continue

		elif [[ $CSVFileColumns == 5 ]]; then

			echo ""
			echo "$CSVFile row $Rows has $CSVFileColumns columns! Column test PASSED! "
			echo ""
		fi


		Subj=$(awk -v r=$Rows -F ',' 'FNR == r {print $1}' $CSVFile | awk '{$1=$1};1' | sed -e 's/[[:blank:]]/_/g')
		MPRDir=`awk -v r=$Rows -F ',' 'FNR == r {print $3}' $CSVFile`
		MAG=`awk -v r=$Rows -F ',' 'FNR == r {print $4}' $CSVFile`
		QSMFile=`awk -v r=$Rows -F ',' 'FNR == r {print $5}' $CSVFile`

	else

		Subj=$(awk -v r=$Rows -F ',' 'FNR == r {print $1}' $CSVFile | awk '{$1=$1};1' | sed -e 's/[[:blank:]]/_/g')		
		
		echo ""
		echo -e "\e[31m----------------------------------------------"
		echo "ERROR: Column 2 needs to be either MEDI_Yes or MEDI_No and is case sensitive."
		echo "$Subj Column 2 entry is $MEDIFlag which cannot be interpreted, skipping $Subj...."
		echo -e "----------------------------------------------\e[0m"
		echo ""
		continue

	fi


	echo ""
	echo "---------------------------------------------------------------"
	echo "*** Evaluating inputs provided in $CSVFile row $Rows: ***"
	echo "---------------------------------------------------------------"
	echo ""

	# MPR Check

	if [ -f "$MPRDir" ] && ls $MPRDir | grep ".nii" 1> /dev/null 2>&1; then

		echo ""
		echo "Provided NIFTI file $MPRDir found! checking if multiple echos exist within file:"
		echo "" 

		MPRDirPath=$(echo $MPRDir | awk -F '/' '{OFS = FS} {$NF=""; print $0}')
		MPRDirFile=$(echo $MPRDir | awk -F '/' '{print $NF}')
		
		unset TimePoints
		TimePoints=$(singularity run -e --bind $MPRDirPath:/mnt $Path/Functions/QSM_Container.simg 3dinfo -nv /mnt/$MPRDirFile)

		if [[ $TimePoints > 1 ]]; then

			echo ""
			echo "$TimePoints echos found in $MPRDirFile"
			echo ""
			echo "Will calculate RMS across echos for $MPRDirFile"
			MPRType=5 # Multiple echos in a single file
			echo ""
						
		elif [[ $TimePoints == 1 ]]; then

			echo ""
			echo "$TimePoints echo found in $MPRDirFile"
			echo ""
			echo "$MPRDirFile will be used as is"
			MPRType=6 #Single file, single echo
			echo ""
		fi

		unset TimePoints MPRDirPath MPRDirFile


	elif [ ! -d "$MPRDir" ] && [ ! -f "$MPRDir" ]; then
		echo ""
		echo -e "\e[31m----------------------------------------------"
		echo "ERROR: MPR/MEMPR Directory/File: $MPRDir NOT FOUND! Skipping $Subj..."
		echo -e "----------------------------------------------\e[0m"
		echo ""
		continue

	elif [ -d "$MPRDir" ]; then
		echo ""
		#echo -e "\e[44m$MPRDir\e[0m FOUND! Checking folder contents"
		echo "MPR/MEMPR Directory: $MPRDir FOUND! Checking folder contents..."
		echo ""

		if [ ! "$(ls -A $MPRDir)" ]; then

			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: $MPRDir is EMPTY, check FOLDER, skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		else

			if ! ls $MPRDir/*.nii* 1> /dev/null 2>&1; then

				echo ""
				echo "No NIFTI files found in $MPRDir, Checking for DICOMS..."
				echo ""
				#continue

				unset First_DICOM Dicom_Err

				First_DICOM=$(singularity run -e --bind $MPRDir:/mnt $Path/Functions/QSM_Container.simg find /mnt -mindepth 1 \
						-maxdepth 1 -type f ! -regex '.*\(nii\|json\|txt\|nii.gz\|HEAD\|BRIK\|hdr\|img\)$' | awk -F '/' 'FNR == 1')

				echo ""
				echo "First DICOM in $MPRDir is $(echo $First_DICOM | awk -F'/' '{print $3}')"
				echo ""

				Dicom_Err=$(singularity run -e --bind $MPRDir:/mnt $Path/Functions/QSM_Container.simg dicom_hdr $First_DICOM | awk 'NR==2 {print $2}')


				if [[ $Dicom_Err == "ERROR:" ]]; then

					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "ERROR: MPR/MEMPR directory $MPRDir has one or more of these issues:"
					echo "1. Folder has DICOMs but also other files that are not DICOMS (excluding: NIFTI/AFNI/Analyze formats)"
					echo "2. Folder has files in it but are neither NIFTI nor DICOM! It's a mystery ¿ⓧ_ⓧﮌ "
					echo "PLEASE check $MPRDir! Skipping $Subj..."
					echo -e "----------------------------------------------\e[0m"
					echo ""
					continue

				elif [[ $Dicom_Err == "type:" ]]; then

					echo ""
					echo "DICOMS FOUND in $MPRDir. They will be processed by 01_MPRAGE.sh ! ( •̀ᴗ•́ )و ̑̑"
					echo ""
					MPRType=4
					
					#Check if $Subj matched Patient name or Patient ID from DICOM headier of $First_DICOM
					DicomID1=$(singularity run -e --bind $MPRDir:/mnt $Path/Functions/QSM_Container.simg dicom_hinfo -no_name -tag 0010,0010 $First_DICOM)
					DicomID2=$(singularity run -e --bind $MPRDir:/mnt $Path/Functions/QSM_Container.simg dicom_hinfo -no_name -tag 0010,0020 $First_DICOM)
			
					#if [[ $Subj != $DicomID1 && $Subj != $DicomID2 ]]; then
					 if [ ! $(echo $DicomID1 | grep $Subj) ] && [ ! $(echo $DicomID2 | grep $Subj) ]; then

						echo ""
						echo -e "\e[93m------------------------------------------------------"
						echo "WARNING: $Subj in $CSVFile DOES NOT match"
						echo ""
						echo "Patient Name:$DicomID1"
						echo "and/or" 						
						echo "Patient ID:$DicomID2"
						echo ""						
						echo "of DICOM headers in $MPRDir "
						echo ""
						echo "Are these the correct DICOMs? (ㆆ _ ㆆ) "						
						echo -e "------------------------------------------------------\e[0m"
						echo ""
						
					fi
					
					unset DicomID1 DicomID2

				else
					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "Unexpected dicom_hdr ERROR in $MPRDir! Skipping $Subj..."
					echo -e "----------------------------------------------\e[0m"
					echo ""
					continue

				fi

				unset First_DICOM Dicom_Err


			elif [[ -n $(find $MPRDir -mindepth 1 -maxdepth 1 -type f -name "*_e*nii*") ]] && [ $(ls -1 $MPRDir/*_e*nii* 2>/dev/null | wc -l) -gt 1 ]; then

				echo ""
				echo "Multiple echos found as separate NIFTI files:"
				echo ""
				echo "`ls -l $MPRDir/*_e*nii* | awk -F '[/]' '{print $NF}'`"
				echo ""
				echo "Will calculate RMS across files"
				MPRType=1 # Multiple echos as separate _e files
				echo ""

				if ! ls $MPRDir/*_e*nii* | grep $Subj 1> /dev/null 2>&1; then
					
					echo ""
					echo -e "\e[93m------------------------------------------------------"
					echo "WARNING: $Subj in $CSVFile NOT part of filename of:"
					echo ""
					echo "`ls -l $MPRDir/*_e*nii* | awk -F '[/]' '{print $NF}'`"
					echo ""
					echo "Are these the correct files? (ㆆ _ ㆆ) "
					echo -e "------------------------------------------------------\e[0m"
					echo ""				

				fi  
				

			#elif ls $MPRDir/*.nii* 1> /dev/null 2>&1 && [[ -n $(find . -mindepth 1 -maxdepth 1 -type f ! -name "*_e*") ]]; then
			elif ls $MPRDir/*.nii* 1> /dev/null 2>&1 && [ $(ls -1 $MPRDir/*.nii* 2>/dev/null | wc -l) -eq 1 ]; then

				echo ""
				echo "Single NIFTI file found, checking if multiple echos exist within file:"
				echo ""
				echo "`ls $MPRDir/*nii* | awk -F '[/]' '{print $NF}'`"
				echo ""

				if ! ls $MPRDir/*nii* | grep $Subj 1> /dev/null 2>&1; then
					
					echo ""
					echo -e "\e[93m------------------------------------------------------"
					echo "WARNING: $Subj in $CSVFile NOT part of filename of:"
					echo ""
					echo "`ls -l $MPRDir/*nii* | awk -F '[/]' '{print $NF}'`"
					echo ""
					echo "Is this the correct file? (ㆆ _ ㆆ) "
					echo -e "------------------------------------------------------\e[0m"
					echo ""				

				fi  


				TimePoints=$(singularity run -e --bind $MPRDir:/mnt $Path/Functions/QSM_Container.simg 3dinfo -nv /mnt/*.nii*)

				if [[ $TimePoints > 1 ]]; then

					echo ""
					echo "$TimePoints echos found in `ls $MPRDir/*nii* | awk -F '[/]' '{print $NF}'`"
					echo ""
					echo "Will calculate RMS across echos for `ls $MPRDir/*nii* | awk -F '[/]' '{print $NF}'`"
					MPRType=2 # Multiple echos in a single file
					echo ""
						
				elif [[ $TimePoints == 1 ]]; then

					echo ""
					echo "$TimePoints echo found in `ls $MPRDir/*nii* | awk -F '[/]' '{print $NF}'`"
					echo ""
					echo "`ls $MPRDir/*nii* | awk -F '[/]' '{print $NF}'` will be used as is"
					MPRType=3 #Single file, single echo
					echo ""
				fi

				unset TimePoints
			else
				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "Unexpected ERROR: Please check $MPRDir, Skipping $Subj..."
				echo ""
				echo "Possibly multiple related NIFTI files found that are not labelled with _e#"
				echo "AND/OR unrelated NIFTI files in $MPRDir folder"
				echo -e "----------------------------------------------\e[0m"
				echo ""
				continue

			fi
		fi
	else
		echo ""
		echo -e "\e[31m----------------------------------------------"
		echo "Unexpected MPR/MEMPR ERROR with Directory/File: $MPRDir ! Skipping $Subj..."
		echo -e "----------------------------------------------\e[0m"
		echo ""
		continue
		
	fi


	if [[ $MEDIFlag == "MEDI_No" ]]; then
		
		# MAG File
		if [ ! -f "$MAG" ]; then

			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: QSM Magnitude image: $MAG NOT in specified path! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		else

			echo ""
			#echo -e "\e[44m$MAG\e[0m Found in specified path!"
			echo "QSM Magnitude image: $MAG found in specified path"
			echo ""

			if ! ls $MAG | awk -F '[/]' '{print $NF}' | grep $Subj 1> /dev/null 2>&1; then
					
				echo ""
				echo -e "\e[93m------------------------------------------------------"
				echo "WARNING: $Subj in $CSVFile NOT part of filename of:"
				echo ""
				echo " $(ls $MAG | awk -F '[/]' '{print $NF}') "
				echo ""
				echo "Is this the correct file? (ㆆ _ ㆆ) "
				echo -e "------------------------------------------------------\e[0m"
				echo ""				

			fi  
			
		fi

		# QSM File
		if [ ! -f "$QSMFile" ]; then

			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: QSM Map: $QSMFile NOT in specified path! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		else

			echo ""
			#echo -e "\e[44m$QSMFile\e[0m Found in specified path!"
			echo "QSM Map: $QSMFile Found in specified path"
			echo ""

			if ! ls $QSMFile | awk -F '[/]' '{print $NF}' | grep $Subj 1> /dev/null 2>&1; then
					
				echo ""
				echo -e "\e[93m------------------------------------------------------"
				echo "WARNING: $Subj in $CSVFile NOT part of filename of:"
				echo ""
				echo " $(ls $QSMFile | awk -F '[/]' '{print $NF}') "
				echo ""
				echo "Is this the correct file? (ㆆ _ ㆆ) "
				echo -e "------------------------------------------------------\e[0m"
				echo ""				

			fi  

		fi


	elif [[	$MEDIFlag == "MEDI_Yes" ]]; then

		#QSM Dicom Directory
		if [ -d "$QSM_Dicom_Dir" ]; then

			echo ""
			#echo -e "\e[44m$QSM_Dicom_Dir\e[0m FOUND! Checking folder contents"
			echo "QSM DICOM directory: $QSM_Dicom_Dir FOUND! Checking folder contents"
			echo ""

			if [ ! "$(ls -A $QSM_Dicom_Dir)" ]; then

				echo ""
				echo -e "\e[31m----------------------------------------------"
				echo "ERROR: QSM DICOM directory $QSM_Dicom_Dir is EMPTY! Please check FOLDER, skipping $Subj..."
				echo -e "----------------------------------------------\e[0m"
				echo ""
				continue

			else
				unset First_DICOM Dicom_Err
								
				First_DICOM=$(singularity run -e --bind $QSM_Dicom_Dir:/mnt $Path/Functions/QSM_Container.simg find /mnt -mindepth 1 \
						-maxdepth 1 -type f ! -regex '.*\(nii\|json\|txt\|nii.gz\|HEAD\|BRIK\|hdr\|img\)$' | awk -F '/' 'FNR == 1')

				Dicom_Err=$(singularity run -e --bind $QSM_Dicom_Dir:/mnt $Path/Functions/QSM_Container.simg dicom_hdr $First_DICOM | awk 'NR==2 {print $2}')

				echo ""
				echo "First DICOM in $QSM_Dicom_Dir is $(echo $First_DICOM | awk -F'/' '{print $3}')"
				echo ""


				if [[ $Dicom_Err == "ERROR:" ]]; then

					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "ERROR: QSM DICOM directory $QSM_Dicom_Dir has one or more of these issues:"
					echo "1. Folder has DICOMs but also other files that are not DICOMS (excluding: NIFTI/AFNI/Analyze formats)"
					echo "2. Folder has files in it but they are not DICOMs"
					echo "PLEASE check $QSM_Dicom_Dir! Skipping $Subj..."
					echo -e "----------------------------------------------\e[0m"
					echo ""
					continue

				elif [[ $Dicom_Err == "type:" ]]; then

					echo ""
					echo "DICOMS FOUND in $QSM_Dicom_Dir. They will be processed by MEDI! ( •̀ᴗ•́ )و ̑̑"
					echo ""

					#Check if $Subj matched Patient name or Patient ID from DICOM headier of $First_DICOM
					DicomID1=$(singularity run -e --bind $QSM_Dicom_Dir:/mnt $Path/Functions/QSM_Container.simg dicom_hinfo -no_name -tag 0010,0010 $First_DICOM)
					DicomID2=$(singularity run -e --bind $QSM_Dicom_Dir:/mnt $Path/Functions/QSM_Container.simg dicom_hinfo -no_name -tag 0010,0020 $First_DICOM)
			
					#if [[ $Subj != $DicomID1 && $Subj != $DicomID2 ]]; then
					 if [ ! $(echo $DicomID1 | grep $Subj) ] && [ ! $(echo $DicomID2 | grep $Subj) ]; then  					

						echo ""
						echo -e "\e[93m------------------------------------------------------"
						echo "WARNING: $Subj in $CSVFile DOES NOT match"
						echo ""
						echo "Patient Name:$DicomID1"
						echo "and/or" 						
						echo "Patient ID:$DicomID2"
						echo ""										
						echo "of DICOM headers in $QSM_Dicom_Dir"
						echo ""
						echo "Are these the correct DICOMs? (ㆆ _ ㆆ) "						
						echo -e "------------------------------------------------------\e[0m"
						echo ""
						
					fi
					
					unset DicomID1 DicomID2

				else

					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "Unexpected dicom_hdr ERROR in $QSM_Dicom_Dir! Skipping $Subj..."
					echo -e "----------------------------------------------\e[0m"
					echo ""
					continue

				fi
				
				unset First_DICOM Dicom_Err
			fi
		else
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: QSM DICOM directory: $QSM_Dicom_Dir NOT FOUND in specified path! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		fi

	fi

	echo ""
	echo "All files/folders specified in $CSVFile FOUND in specified paths"
	echo "Cue the happy dance ♪┏(・o･)┛♪"
	echo "---------------------------------------------------------------"
	echo ""


	echo ""
	echo "---------------------------------------------------------------"
	echo "*** Evaluating output directory:"
	echo " $OutFolder : ***"
	echo "---------------------------------------------------------------"
	echo ""


	# Output folder Check
	if [ -d "$OutFolder" ]; then

		#Check if directory is empty
		if [ "$(ls -A $OutFolder)" ]; then

			echo ""
			echo -e "\e[93m------------------------------------------------------"
			echo "WARNING: $OutFolder already EXISTS and is NOT empty! "
			echo "Checking if $Subj folder exists in $OutFolder."
			echo -e "------------------------------------------------------\e[0m"
			echo ""

			if [ -d "$OutFolder/$Subj" ]; then


				if [ -d "$OutFolder/$Subj/LogFiles" ] && [ -f "$OutFolder/$Subj/LogFiles/$Subj.Output.07.MNI.NL.Warp.QSM.txt" ] && grep -m1 "script finished running succesfully" $OutFolder/$Subj/LogFiles/$Subj.Output.07.MNI.NL.Warp.QSM.txt 1> /dev/null 2>&1; then

					echo ""
					echo "$OutFolder/$Subj already EXISTS! $Subj processed successfully on $(grep -m1 "script finished running succesfully" $OutFolder/$Subj/LogFiles/$Subj.Output.07.MNI.NL.Warp.QSM.txt | awk -F' on ' '{print $2}')"
					echo ""
					echo "Skipping $Subj..."
					echo ""
					continue

				else

					echo ""
					echo -e "\e[31m----------------------------------------------"
					echo "ERROR: $OutFolder/$Subj already EXISTS but $Subj NOT processed or is still being processed by another instance of Ironsmith! "
					echo ""
					echo "Please check $OutFolder/$Subj if no other instances of Ironsmith are currently running. Skipping $Subj..."
					echo -e "----------------------------------------------\e[0m"
					echo ""
					continue
				fi

			else
				echo ""
				echo "$Subj folder does not exist in $OutFolder, Creating Folder"
				echo ""
				mkdir $OutFolder/$Subj
				mkdir $OutFolder/$Subj/LogFiles

				if [ ! -d "$OutFolder/Freesurfer_Skip" ]; then

					mkdir $OutFolder/Freesurfer_Skip
					echo "Copy finished freesurfer recon-all folder here to skip the fressurfer segmentation step." >> $OutFolder/Freesurfer_Skip/README.txt
					echo "Rename finished freesurfer recon-all folder to Subj_FreeSurfSeg_Skull." >> $OutFolder/Freesurfer_Skip/README.txt
					echo "Subj should match the participant you want the segmentation step skipped." >> $OutFolder/Freesurfer_Skip/README.txt
				fi

			fi

		else
			echo ""
			echo -e "\e[93m----------------------------------------------"
			echo "WARNING: $OutFolder Already EXISTS! However, it is empty. $Subj folder will be created"
			echo -e "----------------------------------------------\e[0m"
			echo ""
			mkdir $OutFolder/$Subj
			mkdir $OutFolder/$Subj/LogFiles
			mkdir $OutFolder/Freesurfer_Skip
			echo "Copy finished freesurfer recon-all folder here to skip the fressurfer segmentation step." >> $OutFolder/Freesurfer_Skip/README.txt
			echo "Rename finished freesurfer recon-all folder to Subj_FreeSurfSeg_Skull." >> $OutFolder/Freesurfer_Skip/README.txt
			echo "Subj should match the participant you want the segmentation step skipped." >> $OutFolder/Freesurfer_Skip/README.txt

		fi
	else
		echo ""
		echo "$OutFolder does not exist, it will be created."
		echo ""

		mkdir $OutFolder
		mkdir $OutFolder/$Subj
		mkdir $OutFolder/$Subj/LogFiles
		mkdir $OutFolder/Freesurfer_Skip

		echo "Copy freesurfer recon-all -all folder here to skip the fressurfer segmentation step." >> $OutFolder/Freesurfer_Skip/README.txt
		echo "Rename freesurfer recon-all -all folder to Subj_FreeSurfSeg_Skull." >> $OutFolder/Freesurfer_Skip/README.txt
		echo "Subj should match the participant you want the segmentation step skipped." >> $OutFolder/Freesurfer_Skip/README.txt

	fi


############ Analyses start running here. Different scripts will be called depending on the MEDI flag ############

	if [[ $MEDIFlag == "MEDI_Yes" ]]; then


		#****************************************************
		#1) MEDI
		#****************************************************

		#Passed varialbes to MEDI.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#4) QSM_Dicom_Dir
		#5) Matlab path
		#6) MEDIVer

		#Command
		bash $Path/Functions/MEDI.sh $Subj $OutFolder $Path $QSM_Dicom_Dir $MatPath $MEDIVer < /dev/null #|& tee $OutFolder/$Subj/$Subj.Output.MEDI.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: MEDI.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue

		elif [[ $ExCode == 0 ]]; then
			echo ""
			echo "----------------------------------------------"
			echo "QSM Map file set to $OutFolder/$Subj/QSM/${Subj}_QSM_Map.nii.gz"
			echo "QSM Magnitude file set to $OutFolder/$Subj/QSM/${Subj}_QSM_Mag.nii.gz"
			echo "----------------------------------------------"
			echo ""
			MAG="$OutFolder/$Subj/QSM/${Subj}_QSM_Mag.nii.gz"
			QSMFile="$OutFolder/$Subj/QSM/${Subj}_QSM_Map.nii.gz"
		fi

		#****************************************************
		#2) 01_MPRAGE.sh
		#****************************************************

		#Passed varialbes to 01_MPRAGE.sh
		#1) Suject
		#2) Output Folder
		#3) MPRAGE Directory
		#4) MPRAGE Type
		#5) Path

		#Command
		bash $Path/Functions/01_MPRAGE.sh $Subj $OutFolder $MPRDir $MPRType $Path #|& tee $OutFolder/$Subj/$Subj.Output.01.MPRAGE.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 01_MPRAGE.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi


		#****************************************************
		#3) 02_Create_QSM_Masks.sh
		#****************************************************

		#Passed varialbes to 02_Create_QSM_Masks.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#4) MEDI Flag

		#Command
		bash $Path/Functions/02_Create_QSM_Masks.sh $Subj $OutFolder $Path $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.02_Create_QSM_Masks.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then

			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 02_Create_QSM_Masks.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi

		#****************************************************
		#4) 03_AlignQSM.sh
		#****************************************************

		#Passed varialbes to 03_AlignQSM.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#4) QSM File
		#5) QSM Magnitude
		#6) MEDI Flag

		#Command
		bash $Path/Functions/03_AlignQSM.sh $Subj $OutFolder $Path $QSMFile $MAG $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.03_AlignQSM.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then

			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 03_AlignQSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi

		#****************************************************
		#5) 04_Erode_QSM_Masks.sh
		#****************************************************

		#Passed varialbes to 04_Erode_QSM_Masks.sh
		#1) Suject
		#2) Output Folder
		#3) Path

		#Command
		bash $Path/Functions/04_Erode_QSM_Masks.sh $Subj $OutFolder $Path #|& tee $OutFolder/$Subj/$Subj.Output.04_Erode_QSM_Masks.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 04_Erode_QSM_Masks.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		fi

		#****************************************************
		#6) MEDI_QSM_New_Ref.sh
		#****************************************************

		#Passed varialbes to 04_Erode_QSM_Masks.sh
		#1) Suject
		#2) Output folder
		#3) Path
		#4) QSM DICOM Dir
		#5) Matlab path
		#6) MEDIVer

		#Command
		bash $Path/Functions/MEDI_QSM_New_Ref.sh $Subj $OutFolder $Path $QSM_Dicom_Dir $MatPath $MEDIVer < /dev/null #|& tee $OutFolder/$Subj/$Subj.Output.MEDI_QSM_New_Ref.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: MEDI_QSM_New_Ref.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue

		elif [[ $ExCode == 0 ]]; then
			echo ""
			echo "---------------------------------------------------------------"
			echo "New CSF ref QSM Map set to $OutFolder/$Subj/QSM/${Subj}_QSM_Map_New_CSF.nii.gz"
			echo "New WM ref QSM Map set to $OutFolder/$Subj/QSM/${Subj}_QSM_Map_New_WM.nii.gz"
			echo "---------------------------------------------------------------"
			echo ""
			#QSMFileCSF="$OutFolder/$Subj/QSM/${Subj}_QSM_Map_New_CSF.nii.gz"
			#QSMFileWM="$OutFolder/$Subj/QSM/${Subj}_QSM_Map_New_WM.nii.gz"
		fi

		#****************************************************
		#7) 05_Extract_QSM.sh
		#****************************************************

		#Passed varialbes to 05_Extract_QSM.sh
		#1) Subject
		#2) Output folder
		#3) Path
		#4) MEDI Flag
		#5) Rows

		#Command
		bash $Path/Functions/05_Extract_QSM.sh $Subj $OutFolder $Path $MEDIFlag $Rows #|& tee $OutFolder/$Subj/$Subj.Output.05_Extract_QSM.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode == 1 ]] || [[ $ExCode == 5 ]]; then

			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 05_Extract_QSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue

		elif [[ $ExCode == 20 ]]; then
	
			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "FATAL ERROR: $OutFolder/Group is DAMAGED beyond repair. Please delete $OutFolder/Group and start over"
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			exit 1				

		fi


		#****************************************************
		#8) 06_QSM_SNR.sh
		#****************************************************

		#Passed varialbes to 05_Extract_QSM.sh
		#1) Subject
		#2) Output folder
		#3) Path
		#4) Rows
		#5) MEDIFlag


		#Command
		bash $Path/Functions/06_QSM_SNR.sh $Subj $OutFolder $Path $Rows $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.06_QSM_SNR.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode == 1 ]] || [[ $ExCode == 5 ]]; then

			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 06_QSM_SNR.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue

		elif [[ $ExCode == 20 ]]; then
	
			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "FATAL ERROR: $OutFolder/Group is DAMAGED beyond repair. Please delete $OutFolder/Group and start over"
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			exit 1			

		fi

		#****************************************************
		#9) 07_MNI_NL_WarpQSM.sh
		#****************************************************

		#Passed varialbes to 03_AlignQSM.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#6) MEDI Flag

		#Command
		bash $Path/Functions/07_MNI_NL_WarpQSM.sh $Subj $OutFolder $Path $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.07_MNI_NL_WarpQSM.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 07_MNI_NL_WarpQSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		fi


	elif [[ $MEDIFlag == "MEDI_No" ]]; then

		#****************************************************
		#1) 01_MPRAGE.sh
		#****************************************************

		#Passed varialbes to 01_MPRAGE.sh
		#1) Suject
		#2) Output Folder
		#3) MPRAGE Directory
		#4) MPRAGE Type
		#5) Path

		#Command
		bash $Path/Functions/01_MPRAGE.sh $Subj $OutFolder $MPRDir $MPRType $Path #|& tee $OutFolder/$Subj/$Subj.Output.01.MPRAGE.txt

		#Error Handling
		ExCode=$?
		#echo "The Exit Code is $ExCode"
		if [[ $ExCode > 0 ]]; then

			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 01_MPRAGE.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi


		#****************************************************
		#2) 02_Create_QSM_Masks.sh
		#****************************************************

		#Passed varialbes to 02_Create_QSM_Masks.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#4) MEDI Flag

		#Command
		bash $Path/Functions/02_Create_QSM_Masks.sh $Subj $OutFolder $Path $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.02_Create_QSM_Masks.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 02_Create_QSM_Masks.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		fi

		#****************************************************
		#3) 03_AlignQSM.sh
		#****************************************************

		#Passed varialbes to 03_AlignQSM.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#4) QSM File
		#5) QSM Magnitude
		#6) MEDI Flag

		#Command
		bash $Path/Functions/03_AlignQSM.sh $Subj $OutFolder $Path $QSMFile $MAG $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.03_AlignQSM.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 03_AlignQSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi

		#****************************************************
		#4) 04_Erode_QSM_Masks.sh
		#****************************************************

		#Passed varialbes to 04_Erode_QSM_Masks.sh
		#1) Suject
		#2) Output Folder
		#3) Path

		#Command
		bash $Path/Functions/04_Erode_QSM_Masks.sh $Subj $OutFolder $Path #|& tee $OutFolder/$Subj/$Subj.Output.04_Erode_QSM_Masks.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then

			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 04_Erode_QSM_Masks.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			continue
		fi


		#****************************************************
		#5) 05_Extract_QSM.sh
		#****************************************************

		#Passed varialbes to 05_Extract_QSM.sh
		#1) Subject
		#2) Output folder
		#3) Path
		#4) MEDI Flag
		#5) Rows

		#Command
		bash $Path/Functions/05_Extract_QSM.sh $Subj $OutFolder $Path $MEDIFlag $Rows #|& tee $OutFolder/$Subj/$Subj.Output.05_Extract_QSM.txt

		#Error Handling
		ExCode=$?
		#echo "The exit code was $ExCode"
		if [[ $ExCode == 1 ]] || [[ $ExCode == 5 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 05_Extract_QSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue

		elif [[ $ExCode == 20 ]]; then 
	
			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "FATAL ERROR: $OutFolder/Group is DAMAGED beyond repair. Please delete $OutFolder/Group and start over"
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			exit 1			

		fi


		#****************************************************
		#6) 06_QSM_SNR.sh
		#****************************************************

		#Passed varialbes to 05_Extract_QSM.sh
		#1) Subject
		#2) Output folder
		#3) Path
		#4) Rows
		#5) MEDIFlag

		#Command
		bash $Path/Functions/06_QSM_SNR.sh $Subj $OutFolder $Path $Rows $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.06_QSM_SNR.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode == 1 ]] || [[ $ExCode == 5 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 06_QSM_SNR.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue

		elif [[ $ExCode == 20 ]]; then 
	
			echo ""			
			echo -e "\e[31m----------------------------------------------"
			echo "FATAL ERROR: $OutFolder/Group is DAMAGED beyond repair. Please delete $OutFolder/Group and start over"
			echo -e "----------------------------------------------\e[0m"
			echo ""			
			exit 1	

			
		fi

		#****************************************************
		#7) 07_MNI_NL_WarpQSM.sh
		#****************************************************

		#Passed varialbes to 03_AlignQSM.sh
		#1) Suject
		#2) Output Folder
		#3) Path
		#6) MEDI Flag

		#Command
		bash $Path/Functions/07_MNI_NL_WarpQSM.sh $Subj $OutFolder $Path $MEDIFlag #|& tee $OutFolder/$Subj/$Subj.Output.07_MNI_NL_WarpQSM.txt

		#Error Handling
		ExCode=$?
		if [[ $ExCode > 0 ]]; then
			
			echo ""
			echo -e "\e[31m----------------------------------------------"
			echo "ERROR: 07_MNI_NL_WarpQSM.sh FAILED! Skipping $Subj..."
			echo -e "----------------------------------------------\e[0m"
			echo ""
			continue
		fi

	fi

done

echo ""
echo "---------------------------------------------------------------"
echo "Ironsmith finished running on `date`"
echo ""
echo "Special Thank You To:"
ThankYou=$(shuf -n 1 $Path/Functions/SpecialThankYou.txt)
echo "$ThankYou"
echo ""
if echo "$ThankYou" | grep "Good weather...or maybe not" 1> /dev/null 2>&1; then

	singularity run -e $Path/Functions/QSM_Container.simg curl -s wttr.in?m_0Aq
	echo ""
fi
echo "---------------------------------------------------------------"
echo ""

#   .-'  /
# .'    /   /`.
# |    /   /  |
# |    \__/   |
# `.         .'
#   `.     .'
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#     | ][ |
#   .'  __  `.
#   |  /  \  |
#   |  \__/  |
#   `.      .'
#     `----'
